// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizDuel.DataAccess;

#nullable disable

namespace QuizDuel.DataAccess.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250528180538_addGameModels")]
    partial class addGameModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizDuel.DataAccess.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer")
                        .HasColumnName("currentRound");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finishedAt");

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("player1Id");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("player2Id");

                    b.Property<int>("Turn")
                        .HasColumnType("integer")
                        .HasColumnName("turn");

                    b.HasKey("Id");

                    b.ToTable("games");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.PlayerAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("isCorrect");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("questionId");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("roundId");

                    b.Property<int>("Selected")
                        .HasColumnType("integer")
                        .HasColumnName("selected");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("playerAnswers");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("categoryId");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("gameId");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.RoundQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("questionId");

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("integer")
                        .HasColumnName("questionIndex");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("roundId");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("roundQuestions");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("picture");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.PlayerAnswer", b =>
                {
                    b.HasOne("QuizDuel.DataAccess.Models.Round", "Round")
                        .WithMany("PlayerAnswers")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.Round", b =>
                {
                    b.HasOne("QuizDuel.DataAccess.Models.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.RoundQuestion", b =>
                {
                    b.HasOne("QuizDuel.DataAccess.Models.Round", "Round")
                        .WithMany("RoundQuestions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.Game", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("QuizDuel.DataAccess.Models.Round", b =>
                {
                    b.Navigation("PlayerAnswers");

                    b.Navigation("RoundQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
